---
import Layout from '../../layouts/Layout.astro';
//import ContainerMeta from '../../components/new-meta-comp/ContainerMeta.astro';
import Youtube from '../../components/youtube/Youtube.jsx';
import FiltroComps from 'src/components/main/Admin/FiltroComps.jsx';
import MetaComps from "src/components/main/Admin/MetaComps.jsx"
import Main from '@components/main/Main.astro';

import Twitch from 'src/components/embed/Twitch.jsx';
//import ContainerMetaPBE from '@components/new-meta-comp/ContainerMetaPBE.astro';
import {crearJSONSchema} from "src/json/schema/crearJSONSchema";
import AdComponent from 'src/components/adsense/Adsense.jsx';
const title = "üî• Best TFT Comps & Builds for Set 12 üöÄ | Updated for Every Patch";
// Example: Construct a canonical URL using your production domain
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
// Example: Construct a URL for SEO meta tags using your current domain
const socialImageURL = new URL('/images/preview.png', Astro.url);
const description = `‚úÖ Unlock the top meta team compositions and builds for TFT Set 12. üìä Discover the latest tier lists, strategies, and guides tailored for every patch. ‚öîÔ∏è Explore now for the best tips and tricks!`;
const keywords = `TFT Meta, Meta comps, comps TFT, comp TFT, Meta TFT, composiciones TFT, build TFT`;
const JSONSchema = crearJSONSchema({title});
---
<link rel="canonical" href={canonicalURL} />
<!-- <meta property="og:image" content={socialImageURL} /> -->
<meta name="description" content={description}>
<meta name="keywords" content={keywords}>
<Layout title={title} JSONSchema={JSONSchema}>
  <Fragment slot="bodyMainAside">
    <FiltroComps client:only="react"/>
</Fragment>
<Fragment slot="bodyMainAsideTwitch">
    <Twitch client:only="react"/>
</Fragment>
<Fragment slot="bodyMainAsideAds">
  <AdComponent/>
</Fragment>
  <Main>
    <h1 class="titulo">
      Best TFT Meta Comps & Builds
    </h1>
    <span class="minititulo">Tier List for Set 12 TFT - Patch 14.18B</span>
    <div class="videosYT">
      <Youtube src="https://youtube.com/playlist?list=PLxRnNvReiLMEriFDu0UxXScDabCIX-PWy&si=YW7NdSvPfu9dQhx9" client:load></Youtube>
      <Youtube src="https://www.youtube.com/playlist?list=PLxRnNvReiLMHHtPFxG2tCBzNCrIz_-rnq" client:load/>
    </div>
    <div id="ContainerMetaPBE">
      <!-- <ContainerMetaPBE version={latestVersion} set={setPBE}/> -->
      <!-- <ContainerMeta version={latestVersion} set={set} client:load/> -->
      <div class={"containerMeta"}>
        <MetaComps showHide={false} client:only="react"/>
        </div>
    </div>
  </Main>
</Layout>

<style>
  #containerSwitch{
    display: flex;
    width: 100%;
    position: relative;
    justify-content: center;
    gap: 5px;
    font-size: small;
    align-items: center
  }
  .videosYT{
    display: flex;
    flex-direction: row;
    gap:5px
  }
  .switch {
  position: relative;
  display: flex;
  justify-content: center;
  width: 100px;
  height: 34px;
  }
  .switch input { 
    opacity: 0;
    width: 0;
    height: 0;
  }
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--bg-secondary);
    -webkit-transition: .4s;
    transition: .4s;
  }
  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 46px;
    left: 4px;
    bottom: 4px;
    background-color: var(--bg-primary);
    -webkit-transition: .4s;
    transition: .4s;
  }
  input:checked + .slider {
    background-color: var(--bg-secondary);
  }
  input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
  }
  input:checked + .slider:before {
    -webkit-transform: translateX(46px);
    -ms-transform: translateX(46px);
    transform: translateX(46px);
  }

  /* Rounded sliders */
  .slider.round {
    border-radius: 34px;
  }

  .slider.round:before {
    border-radius: 50%;
  }
  .hide {
    display: none;
  }
  button{
    background-color: var(--bg-secondary);
    color:var(--white);
    display:flex;
    flex: 1;
    justify-content: center;
    padding: 1rem 0;
  }
  button:hover{
    cursor:pointer;
    background-color: var(--bg-tertiary);
  }
  button.activeBtn{
    background-color: var(--bg-primary);
  }
  #containerPestanas{
    display: flex;
    flex-direction: row;
    gap:5px;

  }
  .goldText{
    color:gold
  }
  .containerMeta{
  display: flex;
  position: relative;
  gap:10px;
  flex-direction: column;
}

.containerMetaTier{
  display: flex;
  position: relative;
  gap:10px;
  flex-direction: column;
}
.minititulo{
  display: flex;
  position: relative;
  justify-content: center;
}
</style>

<script>
  document.addEventListener("astro:page-load",()=>{
    const $switchCheckbox = document?.getElementById("switchCheckbox") as HTMLInputElement;
    if ($switchCheckbox) {
      $switchCheckbox.addEventListener("click",()=>{
        const $spanText = document?.getElementsByClassName("spanText");
          $spanText[0]?.classList.toggle("goldText");
          $spanText[1]?.classList.toggle("goldText")
      })
    }
    const $btnTFTLive = document?.getElementById("btnTFTLive");
    const $btnTFTPBE = document?.getElementById("btnTFTPBE");
    const $ContainerMeta = document?.getElementById("ContainerMeta");
    const $ContainerMetaPBE = document?.getElementById("ContainerMetaPBE");
    function activeBtn(){
      $btnTFTLive?.classList.toggle("activeBtn");
      $btnTFTPBE?.classList.toggle("activeBtn");
      $ContainerMeta?.classList.toggle("hide");
      $ContainerMetaPBE?.classList.toggle("hide");
    }
    $btnTFTLive?.addEventListener("click",()=>activeBtn())
    $btnTFTPBE?.addEventListener("click",()=>activeBtn())
  })
</script>