---
import { db, Usuario, asc, desc } from 'astro:db';
import { updateUsersScores } from '../../db/index.js';
const filtro = Astro.url.searchParams.get('filter');
const orden = Astro.url.searchParams.get('order');
let update = Astro.url.searchParams.get('update');

const d = new Date();
let time = d.getTime();

const usuarios = await db
  .select()
  .from(Usuario)
  .orderBy(opcionesOrder({ filtro, orden }));

console.log('update', update);
console.log('time', time);
if (update && Number(update) < time) {
  console.log(Number(update) < time);
  try {
    usuarios.forEach((usuario) => {
      updateUsersScores({
        summonerId: usuario.id,
        plataforma: usuario.plataforma,
      });
    });
  } catch (error) {
    console.log(error);
  }
  console.log('actualizo');
}

function opcionesOrder({ filtro = 'puntaje', orden = 'desc' }) {
  const variables = ['asc', 'desc', 'puntaje', 'region', 'invocador'];
  if (
    !variables.includes(filtro?.toLowerCase()) &&
    !variables.includes(orden?.toLowerCase())
  ) {
    return desc(Usuario.puntaje);
  }
  const order = {
    asc: {
      puntaje: asc(Usuario.puntaje),
      region: asc(Usuario.region),
      invocador: asc(Usuario.invocador),
    },
    desc: {
      puntaje: desc(Usuario.puntaje),
      region: desc(Usuario.region),
      invocador: desc(Usuario.invocador),
    },
  };
  return order[orden?.toLowerCase()][filtro];
}

const URL = {
  profileIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/v1/profile-icons/',
  tierIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-shared-components/global/default/',
  miniTierIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-static-assets/global/default/images/ranked-mini-crests/',
};

/* AÃ±adir todas las plataformas*/
const PLATAFORMAS = {
  la1: 'LAN',
  la2: 'LAS',
};
---

<button id="btnActualizar" class="actualizar"> update </button>

<table>
  <thead>
    <tr>
      <th>#LADDER</th>
      <th>ICONO</th>
      <th class="tablaInvocador">INVOCADOR</th>
      <th>REGION</th>
      <th>TIER</th>
      <th>PUNTOS</th>
    </tr>
  </thead>
  <tbody>
    {
      usuarios.map(
        ({
          tier,
          etiqueta,
          eventoNombre,
          invocador,
          eliminado,
          leaguePoints,
          profileIconId,
          plataforma,
          puntaje,
        }) => {
          return (
            <tr>
              <td>{puntaje} </td>
              <td>
                <img
                  src={URL.profileIcon + profileIconId + '.jpg'}
                  alt={'RIOT profile icon'}
                  height="50"
                  width="50"
                />
              </td>
              <td>{invocador + '#' + etiqueta}</td>
              <td>{PLATAFORMAS[plataforma]}</td>
              <td>
                <img
                  src={URL.tierIcon + tier.toLowerCase() + '.png'}
                  alt={'RIOT tier icon'}
                  height="50"
                  width="50"
                />
              </td>
              <td>{leaguePoints}</td>
            </tr>
          );
        }
      )
    }
  </tbody>
</table>

<style>
  table {
    width: 100%;
    table-layout: fixed;
  }

  th {
    text-align: center;
  }
  td {
    text-align: center;
  }

  tr:hover {
    background-color: var(--bg-secondary);
  }

  table,
  th,
  td {
    border: 1px solid;
  }

  .tablaInvocador {
    width: 40%;
  }
</style>

<script>
  import { navigate } from 'astro:transitions/client';
  const isDev = import.meta.env.DEV;
  const btnActualizar = document.querySelector('#btnActualizar');
  btnActualizar.addEventListener('click', () => {
    alert('click');
    const d = new Date();
    let time = d.getTime();
    navigate(
      `${isDev ? 'http' : 'https'}://${isDev ? 'localhost:4321' : 'tft.guiadeparche.com'}/top-ladder/?filter=puntaje&order=desc&update=${time}`
    );
  });
</script>
