---
const {} = Astro.props;
import { Usuario, asc, desc, db, sql, eq } from 'astro:db';
const region = Astro.url.searchParams.get('region') || 'todos'; //todos la1,etc
const filtro = Astro.url.searchParams.get('filter') || 'puntaje'; // invocador, region, puntaje
const orden = Astro.url.searchParams.get('order') || 'asc';
let update = Astro.url.searchParams.get('update');
import { updateUsersScores } from '../../db';

const URL = {
  profileIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/v1/profile-icons/',
  tierIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-shared-components/global/default/',
  miniTierIcon:
    'https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-static-assets/global/default/images/ranked-mini-crests/',
};

const arrayPlataforma = ['la1', 'la2', 'euw1', 'na1'];

let usuarios = await db
  .select({
    ladder: sql`(SELECT COUNT(*) + 1 
               FROM Usuario AS u 
               WHERE 
                  CASE
                      WHEN u.puntaje < Usuario.puntaje THEN u.leaguePoints > Usuario.leaguePoints
                  END
              ) AS ladder`,
    tier: Usuario.tier,
    etiqueta: Usuario.etiqueta,
    invocador: Usuario.invocador,
    eliminado: Usuario.eliminado,
    eventoNombre: Usuario.eventoNombre,
    leaguePoints: Usuario.leaguePoints,
    profileIconId: Usuario.profileIconId,
    plataforma: Usuario.plataforma,
    puntaje: Usuario.puntaje,
    id: Usuario.id,
  })
  .from(Usuario)
  .orderBy(opcionesOrder({ filtro, orden }))
  .where(arrayPlataforma.includes(region) && eq(Usuario.plataforma, region));

function opcionesOrder({ filtro = 'puntaje', orden = 'desc' }) {
  const variables = ['asc', 'desc', 'puntaje', 'region', 'invocador'];
  if (
    !variables.includes(filtro?.toLowerCase()) &&
    !variables.includes(orden?.toLowerCase())
  ) {
    return asc(Usuario.puntaje), desc(Usuario.leaguePoints);
  }
  const order = {
    asc: {
      puntaje: (asc(Usuario.puntaje), desc(Usuario.leaguePoints)),
      region: asc(Usuario.plataforma),
      invocador: asc(Usuario.invocador),
    },
    desc: {
      puntaje: desc(Usuario.puntaje),
      region: desc(Usuario.plataforma),
      invocador: desc(Usuario.invocador),
    },
  };
  return order[orden?.toLowerCase()][filtro];
}

const PLATAFORMAS = {
  la1: 'LAN',
  la2: 'LAS',
  euw1: 'EUW',
  br1: 'BR',
  eun1: 'EUN',
  jp1: 'JP',
  kr: 'KR',
  na1: 'NA',
  oc1: 'OC',
  tr1: 'TR',
  ru: 'RU',
  ph2: 'PH',
  sg2: 'SG',
  th2: 'TH',
  tw2: 'TW',
  vn2: 'VN',
};

let hora = new Date().getHours();
console.log('Se actualiza?', Number(update) > hora);
if (Number(update) > hora) {
  hora = Number(update);
  usuarios.forEach(async (user) => {
    await updateUsersScores({
      summonerId: user.id,
      plataforma: user.plataforma,
    });
  });
  usuarios = await db
    .select({
      // ladder: sql`(SELECT COUNT(*) + 1
      //          FROM Usuario AS u
      //          WHERE
      //             CASE
      //                 WHEN u.puntaje >= Usuario.puntaje THEN u.leaguePoints >= Usuario.leaguePoints
      //             END
      //         ) AS ladder`,
      tier: Usuario.tier,
      etiqueta: Usuario.etiqueta,
      invocador: Usuario.invocador,
      eliminado: Usuario.eliminado,
      eventoNombre: Usuario.eventoNombre,
      leaguePoints: Usuario.leaguePoints,
      profileIconId: Usuario.profileIconId,
      plataforma: Usuario.plataforma,
      puntaje: Usuario.puntaje,
      id: Usuario.id,
      ladder: sql`(SELECT COUNT(*) OVER (ORDER BY puntaje ASC, leaguePoints DESC)
                  FROM Usuario) AS ladder`,
    })
    .from(Usuario)
    .orderBy(opcionesOrder({ filtro, orden }))
    .where(arrayPlataforma.includes(region) && eq(Usuario.plataforma, region));
}
console.log(usuarios);
---

<table id="tablaResultados">
  <thead>
    <tr>
      <th>#LADDER</th>
      <th>ICONO</th>
      <th class="tablaInvocador">INVOCADOR</th>
      <th>REGION</th>
      <th>TIER</th>
      <th>PUNTOS</th>
    </tr>
  </thead>
  <tbody>
    {
      usuarios.map(
        ({
          tier,
          etiqueta,
          eventoNombre,
          invocador,
          eliminado,
          leaguePoints,
          profileIconId,
          plataforma,
          puntaje,
          ladder,
        }) => {
          return (
            <tr>
              <td>{ladder} </td>
              <td>
                <img
                  src={URL.profileIcon + profileIconId + '.jpg'}
                  alt={'RIOT profile icon'}
                  height="50"
                  width="50"
                />
              </td>
              <td>{invocador + '#' + etiqueta}</td>
              <td>{PLATAFORMAS[plataforma]}</td>
              <td>
                <img
                  src={URL.tierIcon + tier.toLowerCase() + '.png'}
                  alt={'RIOT tier icon'}
                  height="50"
                  width="50"
                />
              </td>
              <td>{leaguePoints}</td>
            </tr>
          );
        }
      )
    }
  </tbody>
</table>

<style>
  table {
    width: 100%;
    table-layout: fixed;
  }

  th {
    text-align: center;
  }
  td {
    text-align: center;
  }

  tr:hover {
    background-color: var(--bg-secondary);
  }

  table,
  th,
  td {
    border: 1px solid;
  }

  .tablaInvocador {
    width: 40%;
  }

  .hide {
    display: none;
  }
</style>
